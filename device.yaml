# =============================================================================
# AXP2101 Single Cell PMIC with E-gauge Device Driver Definition
# =============================================================================
# This file defines the register map and configuration for the AXP2101
# Power Management IC manufactured by X-Powers.
#
# Features:
# - 3.9V-5.5V Input Operating Range
# - Single Cell Battery with Fuel Gauge (E-gauge 3.0)
# - 4 DC-DC converters (DCDC1-4)
# - 11 LDO regulators (ALDO1-4, BLDO1-2, DLDO1-2, CPUSLDO, RTCLDO1-2)
# - 100mA-1A Linear charger
# - 14-bit ADC for voltage/temperature monitoring
# - I2C/TWI and RSB interface support
#
# Interface: I2C (default address 0x68/0x69) or RSB
# Package: QFN-40 (5mm x 5mm)
# =============================================================================

config:
  # Address type for all registers (8-bit addressing)
  register_address_type: u8

  # Default byte order - single byte registers mostly
  default_byte_order: BE

  # Default bit order - LSB0 (bit 0 is least significant)
  default_bit_order: LSB0

  # Default access patterns
  default_register_access: RW
  default_field_access: RW

  # Enable defmt support for debugging
  defmt_feature: "defmt"

  # Name conversion for register/field names from datasheet
  name_word_boundaries: [ "Underscore", "Hyphen", "LowerUpper", "UpperDigit", "DigitUpper" ]

# =============================================================================
# STATUS AND IDENTIFICATION REGISTERS
# =============================================================================

PowerStatus:
  # REG00H - comm_stat0
  type: register
  address: 0x0
  size_bits: 8
  access: RO
  description: |
    Power management status register indicating various system states including
    VBUS status, BATFET state, battery presence, and thermal regulation.
  fields:
    # Bits 7-6 are reserved
    vbus_good:
      base: bool
      start: 5
      description: "VBUS good indication (true: good, false: not good)."

    batfet_state:
      base: bool
      start: 4
      description: "BATFET state (true: open, false: closed)."

    battery_present:
      base: bool
      start: 3
      description: "Battery present state (true: present, false: absent)."

    battery_active_mode:
      base: bool
      start: 2
      description: "Battery in Active Mode (true: active mode, false: normal)."

    thermal_regulation_active:
      base: bool
      start: 1
      description: "Thermal regulation status (true: in thermal regulation, false: normal)."

    current_limit_active:
      base: bool
      start: 0
      description: "Current limit state (true: in current limit, false: normal)."

SystemStatus:
  # REG01H - comm_stat1
  type: register
  address: 0x1
  size_bits: 8
  access: RO
  description: |
    System status register showing battery current direction, system power state,
    VINDPM status, and charging status.
  fields:
    # Bit 7 is reserved
    battery_current_direction:
      base: uint
      start: 5
      end: 7 # 2 bits
      description: "Battery current direction indicator."
      conversion:
        name: BatteryCurrentDirection
        Standby: { value: 0b00, description: "Battery in standby" }
        Charging: { value: 0b01, description: "Battery charging" }
        Discharging: { value: 0b10, description: "Battery discharging" }
        Reserved: { value: 0b11, description: "Reserved state" }

    system_power_on:
      base: bool
      start: 4
      description: "System status indication (true: system power on, false: system power off)."

    vindpm_active:
      base: bool
      start: 3
      description: "VINDPM status (true: in VINDPM, false: not in VINDPM)."

    charging_status:
      base: uint
      start: 0
      end: 3 # 3 bits
      description: "Charging status indication."
      conversion:
        name: ChargingStatus
        TriCharge: { value: 0b000, description: "Trickle charge mode" }
        PreCharge: { value: 0b001, description: "Pre-charge mode" }
        ConstantCurrent: { value: 0b010, description: "Constant current (CC) mode" }
        ConstantVoltage: { value: 0b011, description: "Constant voltage (CV) mode" }
        ChargeDone: { value: 0b100, description: "Charge completed" }
        NotCharging: { value: 0b101, description: "Not charging" }
        Reserved: { value: "default", description: "Reserved state" }

ChipId:
  # REG03H
  type: register
  address: 0x3
  size_bits: 8
  access: RO
  description: |
    Chip identification register containing version and ID information.
    Expected value for AXP2101 is 0x47 (0100_0111).
  fields:
    chip_id_high:
      base: uint
      start: 6
      end: 8 # 2 bits
      description: "Chip ID high bits."

    chip_version:
      base: uint
      start: 4
      end: 6 # 2 bits
      description: "Chip version."
      conversion:
        name: ChipVersion
        VersionA: { value: 0b00, description: "A version" }
        VersionB: { value: 0b01, description: "B version" }
        Reserved1: { value: 0b10, description: "Reserved" }
        Reserved2: { value: 0b11, description: "Reserved" }

    chip_id_low:
      base: uint
      start: 0
      end: 4 # 4 bits
      description: "Chip ID low bits. Combined with high bits: 01_0111 = AXP2101."

# =============================================================================
# DATA BUFFER REGISTERS
# =============================================================================

DataBuffer:
  # REG04H-REG08H
  type: register
  address: 0x4
  size_bits: 8
  access: RW
  reset_value: 0x0
  repeat:
    count: 5 # 5 data buffer registers (0x04-0x08)
    stride: 1 # Sequential addresses
  description: |
    General purpose data buffer registers for storing system data.
    These registers retain their values as long as any power source is present.
    Useful for storing configuration data or system state between resets.
  fields:
    data:
      base: uint
      start: 0
      end: 8
      description: "8-bit data storage value."

# =============================================================================
# CORE CONFIGURATION REGISTERS
# =============================================================================

CommonConfig:
  # REG10H - comm_cfg
  type: register
  address: 0x10
  size_bits: 8
  access: RW
  reset_value: 0x5c # Based on default values from datasheet
  description: |
    Common configuration register controlling various system behaviors including
    discharge control, restart functionality, and power-off controls.
  fields:
    # Bits 7-6 are reserved
    discharge_off_enable:
      base: bool
      start: 5
      description: "Internal off-discharge enable for DCDC & LDO & SWITCH (true: enable, false: disable)."

    # Bit 4 is reserved
    pwrok_restart_enable:
      base: bool
      start: 3
      description: "PWROK PIN pull low to restart the system (true: enable, false: disable)."

    power_on_shutdown_enable:
      base: bool
      start: 2
      description: "PWRON 16s to shutdown the PMIC enable (true: enable, false: disable)."

    soft_system_restart:
      base: bool
      start: 1
      access: WO
      description: "Restart the SoC System, POWOFF/POWON and reset related registers (true: reset)."

    soft_power_off:
      base: bool
      start: 0
      access: WO
      description: "Soft PWROFF (true: power off)."

BatfetControl:
  # REG12H - batfet_ctrl
  type: register
  address: 0x12
  size_bits: 8
  access: RW
  description: |
    BATFET control register for battery connection management and overcurrent protection.
  fields:
    # Bits 7-4 and 2, 0 are reserved
    batfet_poweroff_enable:
      base: bool
      start: 3
      description: "BATFET enable when POWEROFF and Battery only (true: enable, false: disable)."

    batfet_ocp_enable:
      base: bool
      start: 1
      description: "BATFET close when OCP (6A) for 100us (true: enable, false: disable)."

VindpmConfig:
  # REG15H - vindpm_cfg
  type: register
  address: 0x15
  size_bits: 8
  access: RW
  reset_value: 0x6 # Default 4.36V
  description: |
    VINDPM (Input Voltage Dynamic Power Management) configuration register.
    Controls the minimum input voltage threshold for power management.
  fields:
    # Bits 7-4 are reserved
    vindpm_threshold:
      base: uint
      start: 0
      end: 4 # 4 bits
      description: "VINDPM threshold configuration."
      conversion:
        name: VindpmVoltage
        V3_88: { value: 0x0, description: "3.88V" }
        V3_96: { value: 0x1, description: "3.96V" }
        V4_04: { value: 0x2, description: "4.04V" }
        V4_12: { value: 0x3, description: "4.12V" }
        V4_20: { value: 0x4, description: "4.20V" }
        V4_28: { value: 0x5, description: "4.28V" }
        V4_36: { value: 0x6, description: "4.36V" }
        V4_44: { value: 0x7, description: "4.44V" }
        V4_52: { value: 0x8, description: "4.52V" }
        V4_60: { value: 0x9, description: "4.60V" }
        V4_68: { value: 0xa, description: "4.68V" }
        V4_76: { value: 0xb, description: "4.76V" }
        V4_84: { value: 0xc, description: "4.84V" }
        V4_92: { value: 0xd, description: "4.92V" }
        V5_00: { value: 0xe, description: "5.00V" }
        V5_08: { value: 0xf, description: "5.08V" }

InputCurrentLimit:
  # REG16H - iin_lim
  type: register
  address: 0x16
  size_bits: 8
  access: RW
  reset_value: 0x1 # Default 500mA
  description: |
    Input current limit configuration register.
    Sets the maximum allowable input current from VBUS.
  fields:
    # Bits 7-3 are reserved
    current_limit:
      base: uint
      start: 0
      end: 3 # 3 bits
      description: "Input current limit setting."
      conversion:
        name: InputCurrentLimit
        Ma100: { value: 0b000, description: "100mA" }
        Ma500: { value: 0b001, description: "500mA" }
        Ma900: { value: 0b010, description: "900mA" }
        Ma1000: { value: 0b011, description: "1000mA" }
        Ma1500: { value: 0b100, description: "1500mA" }
        Ma2000: { value: 0b101, description: "2000mA" }
        Reserved1: { value: 0b110, description: "Reserved" }
        Reserved2: { value: 0b111, description: "Reserved" }

# =============================================================================
# CHARGER CONTROL REGISTERS
# =============================================================================

ModuleEnable:
  # REG18H - module_en
  type: register
  address: 0x18
  size_bits: 8
  access: RW
  reset_value: 0xa # Gauge and charge enabled by default
  description: |
    Module enable register controlling major system functions including
    fuel gauge, battery charging, and watchdog functionality.
  fields:
    # Bits 7-4 are reserved
    fuel_gauge_enable:
      base: bool
      start: 3
      description: "Fuel Gauge module enable (true: enable, false: disable)."

    button_battery_charge_enable:
      base: bool
      start: 2
      description: "Button battery charge enable (true: enable, false: disable)."

    battery_charge_enable:
      base: bool
      start: 1
      description: "Cell battery charge enable (true: enable, false: disable)."

    watchdog_enable:
      base: bool
      start: 0
      description: "Watchdog module enable (true: enable, false: disable)."

PrechargeCurrentConfig:
  # REG61H - iprechg_cfg
  type: register
  address: 0x61
  size_bits: 8
  access: RW
  reset_value: 0x5 # Default 125mA
  description: |
    Pre-charge current limit configuration.
    Controls the charging current during the pre-charge phase when battery voltage is low.
  fields:
    # Bits 7-4 are reserved
    precharge_current:
      base: uint
      start: 0
      end: 4 # 4 bits
      description: "Pre-charge current limit (25mA per step)."
      conversion:
        name: PrechargeCurrentLimit
        Ma0: { value: 0x0, description: "0mA" }
        Ma25: { value: 0x1, description: "25mA" }
        Ma50: { value: 0x2, description: "50mA" }
        Ma75: { value: 0x3, description: "75mA" }
        Ma100: { value: 0x4, description: "100mA" }
        Ma125: { value: 0x5, description: "125mA" }
        Ma150: { value: 0x6, description: "150mA" }
        Ma175: { value: 0x7, description: "175mA" }
        Ma200: { value: 0x8, description: "200mA" }
        Reserved: { value: "default", description: "Reserved values 9-15" }

FastChargeCurrentConfig:
  # REG62H - icc_cfg
  type: register
  address: 0x62
  size_bits: 8
  access: RW
  description: |
    Fast charge (constant current) current limit configuration.
    Controls the charging current during the main charging phase.
  fields:
    # Bits 7-5 are reserved
    fast_charge_current:
      base: uint
      start: 0
      end: 5 # 5 bits
      description: "Fast charge current limit."
      conversion:
        name: FastChargeCurrentLimit
        Ma0: { value: 0x0, description: "0mA" }
        Ma100: { value: 0x4, description: "100mA" }
        Ma125: { value: 0x5, description: "125mA" }
        Ma150: { value: 0x6, description: "150mA" }
        Ma175: { value: 0x7, description: "175mA" }
        Ma200: { value: 0x8, description: "200mA" }
        Ma300: { value: 0x9, description: "300mA" }
        Ma400: { value: 0xa, description: "400mA" }
        Ma500: { value: 0xb, description: "500mA" }
        Ma600: { value: 0xc, description: "600mA" }
        Ma700: { value: 0xd, description: "700mA" }
        Ma800: { value: 0xe, description: "800mA" }
        Ma900: { value: 0xf, description: "900mA" }
        Ma1000: { value: 0x10, description: "1000mA" }
        Reserved: { value: "default", description: "Reserved values" }

TerminationCurrentConfig:
  # REG63H - iterm_cfg
  type: register
  address: 0x63
  size_bits: 8
  access: RW
  reset_value: 0x15 # Termination enabled, 125mA
  description: |
    Charge termination current configuration.
    Controls when charging stops based on current level.
  fields:
    # Bits 7-5 are reserved
    termination_enable:
      base: bool
      start: 4
      description: "Charging termination current enable (true: enable, false: disable)."

    termination_current:
      base: uint
      start: 0
      end: 4 # 4 bits
      description: "Termination current limit (25mA per step)."
      conversion:
        name: TerminationCurrentLimit
        Ma0: { value: 0x0, description: "0mA" }
        Ma25: { value: 0x1, description: "25mA" }
        Ma50: { value: 0x2, description: "50mA" }
        Ma75: { value: 0x3, description: "75mA" }
        Ma100: { value: 0x4, description: "100mA" }
        Ma125: { value: 0x5, description: "125mA" }
        Ma150: { value: 0x6, description: "150mA" }
        Ma175: { value: 0x7, description: "175mA" }
        Ma200: { value: 0x8, description: "200mA" }
        Reserved: { value: "default", description: "Reserved values 9-15" }

ChargeVoltageConfig:
  # REG64H - chg_v_cfg
  type: register
  address: 0x64
  size_bits: 8
  access: RW
  reset_value: 0x3 # Default 4.2V
  description: |
    Charge voltage limit configuration.
    Sets the target voltage for battery charging.
  fields:
    # Bits 7-3 are reserved
    charge_voltage:
      base: uint
      start: 0
      end: 3 # 3 bits
      description: "Charge voltage limit setting."
      conversion:
        name: ChargeVoltageLimit
        V4_6: { value: 0b000, description: "4.6V" }
        V4_0: { value: 0b001, description: "4.0V" }
        V4_1: { value: 0b010, description: "4.1V" }
        V4_2: { value: 0b011, description: "4.2V" }
        V4_35: { value: 0b100, description: "4.35V" }
        V4_4: { value: 0b101, description: "4.4V" }
        Reserved1: { value: 0b110, description: "Reserved" }
        Reserved2: { value: 0b111, description: "Reserved" }

# =============================================================================
# POWER OUTPUT CONTROL REGISTERS
# =============================================================================

DcdcConfig0:
  # REG80H - dcdc_cfg0
  type: register
  address: 0x80
  size_bits: 8
  access: RW
  description: |
    DCDC configuration register 0 controlling DCDC enables and DVM settings.
  fields:
    # Bit 7 is reserved
    dcdc_force_ccm:
      base: bool
      start: 6
      description: "Force DCDC to work in CCM mode (true: enable, false: disable)."

    dvm_speed:
      base: bool
      start: 5
      description: "DVM voltage ramp control (true: 31.250us/step, false: 15.625us/step)."

    dcdc5_enable:
      base: bool
      start: 4
      description: "DCDC5 enable (true: enable, false: disable)."

    dcdc4_enable:
      base: bool
      start: 3
      description: "DCDC4 enable (true: enable, false: disable)."

    dcdc3_enable:
      base: bool
      start: 2
      description: "DCDC3 enable (true: enable, false: disable)."

    dcdc2_enable:
      base: bool
      start: 1
      description: "DCDC2 enable (true: enable, false: disable)."

    dcdc1_enable:
      base: bool
      start: 0
      description: "DCDC1 enable (true: enable, false: disable)."

DcdcConfig1:
  # REG81H - dcdc_cfg1
  type: register
  address: 0x81
  size_bits: 8
  access: RW
  description: |
    DCDC configuration register 1 controlling PWM/PFM modes and frequency spreading.
  fields:
    dcdc_frequency_spread_enable:
      base: bool
      start: 7
      description: "DCDC frequency spread enable (true: enable, false: disable)."

    dcdc_frequency_spread_range:
      base: bool
      start: 6
      description: "DCDC frequency spread range control (true: 100kHz, false: 50kHz)."

    dcdc4_pwm_mode:
      base: bool
      start: 5
      description: "DCDC4 PWM/PFM control (true: always PWM, false: auto switch)."

    dcdc3_pwm_mode:
      base: bool
      start: 4
      description: "DCDC3 PWM/PFM control (true: always PWM, false: auto switch)."

    dcdc2_pwm_mode:
      base: bool
      start: 3
      description: "DCDC2 PWM/PFM control (true: always PWM, false: auto switch)."

    dcdc1_pwm_mode:
      base: bool
      start: 2
      description: "DCDC1 PWM/PFM control (true: always PWM, false: auto switch)."

    dcdc_uvp_debounce:
      base: uint
      start: 0
      end: 2 # 2 bits
      description: "DCDC UVP debounce time configuration."
      conversion:
        name: DcdcUvpDebounce
        Us60: { value: 0b00, description: "60us" }
        Us120: { value: 0b01, description: "120us" }
        Us180: { value: 0b10, description: "180us" }
        Us240: { value: 0b11, description: "240us" }

Dcdc1VoltageConfig:
  # REG82H - dcdc1_cfg
  type: register
  address: 0x82
  size_bits: 8
  access: RW
  description: |
    DCDC1 output voltage configuration.
    Voltage range: 1.5V to 3.4V in 100mV steps.
  fields:
    # Bits 7-5 are reserved
    voltage_setting:
      base: uint
      start: 0
      end: 5 # 5 bits
      description: "DCDC1 output voltage (1.5V + value * 100mV)."

Dcdc2VoltageConfig:
  # REG83H - dcdc2_cfg
  type: register
  address: 0x83
  size_bits: 8
  access: RW
  description: |
    DCDC2 output voltage configuration with DVM support.
    Complex voltage mapping: 0.5-1.2V (10mV steps), 1.22-1.54V (20mV steps).
  fields:
    dvm_enable:
      base: bool
      start: 7
      description: "DCDC2 DVM enable control (true: enable, false: disable)."

    voltage_setting:
      base: uint
      start: 0
      end: 7 # 7 bits
      description: "DCDC2 output voltage setting (complex mapping, see datasheet)."

Dcdc3VoltageConfig:
  # REG84H - dcdc3_cfg
  type: register
  address: 0x84
  size_bits: 8
  access: RW
  description: |
    DCDC3 output voltage configuration with DVM support.
    Same voltage mapping as DCDC2: 0.5-1.2V (10mV steps), 1.22-1.54V (20mV steps), 1.6-3.4V (100mV steps).
  fields:
    dvm_enable:
      base: bool
      start: 7
      description: "DCDC3 DVM enable control (true: enable, false: disable)."

    voltage_setting:
      base: uint
      start: 0
      end: 7 # 7 bits
      description: "DCDC3 output voltage setting (complex mapping, see datasheet)."

Dcdc4VoltageConfig:
  # REG85H - dcdc4_cfg
  type: register
  address: 0x85
  size_bits: 8
  access: RW
  description: |
    DCDC4 output voltage configuration.
    Voltage mapping: 0.5-1.2V (10mV steps), 1.22-1.84V (20mV steps).
  fields:
    # Bit 7 is reserved
    voltage_setting:
      base: uint
      start: 0
      end: 7 # 7 bits
      description: "DCDC4 output voltage setting (complex mapping, see datasheet)."

LdoEnableConfig0:
  # REG90H - ldo_en_cfg0
  type: register
  address: 0x90
  size_bits: 8
  access: RW
  description: |
    LDO enable configuration register 0.
    Controls enable/disable state for DLDO1, CPUSLDO, BLDO1-2, ALDO1-4.
  fields:
    dldo1_enable:
      base: bool
      start: 7
      description: "DLDO1 enable (true: enable, false: disable)."

    cpusldo_enable:
      base: bool
      start: 6
      description: "CPUSLDO enable (true: enable, false: disable)."

    bldo2_enable:
      base: bool
      start: 5
      description: "BLDO2 enable (true: enable, false: disable)."

    bldo1_enable:
      base: bool
      start: 4
      description: "BLDO1 enable (true: enable, false: disable)."

    aldo4_enable:
      base: bool
      start: 3
      description: "ALDO4 enable (true: enable, false: disable)."

    aldo3_enable:
      base: bool
      start: 2
      description: "ALDO3 enable (true: enable, false: disable)."

    aldo2_enable:
      base: bool
      start: 1
      description: "ALDO2 enable (true: enable, false: disable)."

    aldo1_enable:
      base: bool
      start: 0
      description: "ALDO1 enable (true: enable, false: disable)."

# =============================================================================
# ADC DATA REGISTERS (Read-only, 14-bit values)
# =============================================================================

BatteryVoltageAdc:
  # REG34H-REG35H
  type: register
  address: 0x34
  size_bits: 16
  access: RO
  byte_order: BE # MSB first
  description: |
    Battery voltage ADC reading. 14-bit resolution.
    High byte: bits [13:8], Low byte: bits [7:0]
    Conversion: Voltage (mV) = adc_value * 1.0 (1mV/LSB)
  fields:
    # Bits 15-14 are reserved in high byte
    raw_value:
      base: uint
      start: 0
      end: 14 # 14-bit ADC value
      description: "Raw 14-bit ADC value. Use driver helper for voltage conversion."

TsPinAdc:
  # REG36H-REG37H  
  type: register
  address: 0x36
  size_bits: 16
  access: RO
  byte_order: BE
  description: |
    TS (Temperature Sensor) pin ADC reading. 14-bit resolution.
    Conversion: Voltage (mV) = adc_value * 0.5 (0.5mV/LSB)
  fields:
    adc_low_freq_enable:
      base: bool
      start: 15 # Bit 7 of high byte
      access: RW
      description: "ADC low frequency sample mode when PWROFF and battery only (64s)."

    # Bit 14 is reserved
    raw_value:
      base: uint
      start: 0
      end: 14
      description: "Raw 14-bit TS ADC value. Use driver helper for voltage conversion."

VbusVoltageAdc:
  # REG38H-REG39H
  type: register
  address: 0x38
  size_bits: 16
  access: RO
  byte_order: BE
  description: |
    VBUS voltage ADC reading. 14-bit resolution.
    Conversion: Voltage (mV) = adc_value * 1.0 (1mV/LSB)
  fields:
    # Bits 15-14 are reserved
    raw_value:
      base: uint
      start: 0
      end: 14
      description: "Raw 14-bit VBUS ADC value. Use driver helper for voltage conversion."

VsysVoltageAdc:
  # REG3AH-REG3BH
  type: register
  address: 0x3a
  size_bits: 16
  access: RO
  byte_order: BE
  description: |
    VSYS voltage ADC reading. 14-bit resolution.
    Conversion: Voltage (mV) = adc_value * 1.0 (1mV/LSB)
  fields:
    # Bits 15-14 are reserved
    raw_value:
      base: uint
      start: 0
      end: 14
      description: "Raw 14-bit VSYS ADC value. Use driver helper for voltage conversion."

InternalTemperatureAdc:
  # REG3CH-REG3DH
  type: register
  address: 0x3c
  size_bits: 16
  access: RO
  byte_order: BE
  description: |
    Internal die temperature ADC reading. 14-bit resolution.
    Conversion: Temperature (°C) = (adc_value * 0.1) - 144.7
  fields:
    # Bits 15-14 are reserved
    raw_value:
      base: uint
      start: 0
      end: 14
      description: "Raw 14-bit temperature ADC value. Use driver helper for temperature conversion."

# =============================================================================
# INTERRUPT CONTROL REGISTERS
# =============================================================================

IrqEnable0:
  # REG40H - irq_en0
  type: register
  address: 0x40
  size_bits: 8
  access: RW
  reset_value: 0xff # All battery/gauge IRQs enabled by default
  description: |
    Interrupt enable register 0 for battery and fuel gauge related interrupts.
  fields:
    soc_warning_level2_irq_enable:
      base: bool
      start: 7
      description: "SOC drop to Warning Level2 IRQ enable."

    soc_warning_level1_irq_enable:
      base: bool
      start: 6
      description: "SOC drop to Warning Level1 IRQ enable."

    gauge_watchdog_timeout_irq_enable:
      base: bool
      start: 5
      description: "Gauge watchdog timeout IRQ enable."

    new_soc_irq_enable:
      base: bool
      start: 4
      description: "Gauge new SOC IRQ enable."

    battery_charge_over_temp_irq_enable:
      base: bool
      start: 3
      description: "Battery over temperature in charge mode IRQ enable."

    battery_charge_under_temp_irq_enable:
      base: bool
      start: 2
      description: "Battery under temperature in charge mode IRQ enable."

    battery_work_over_temp_irq_enable:
      base: bool
      start: 1
      description: "Battery over temperature in work mode IRQ enable."

    battery_work_under_temp_irq_enable:
      base: bool
      start: 0
      description: "Battery under temperature in work mode IRQ enable."

IrqEnable1:
  # REG41H - irq_en1
  type: register
  address: 0x41
  size_bits: 8
  access: RW
  reset_value: 0xf8 # VBUS, battery, and power key IRQs enabled
  description: |
    Interrupt enable register 1 for VBUS, battery insertion/removal, and power key events.
  fields:
    vbus_insert_irq_enable:
      base: bool
      start: 7
      description: "VBUS insert IRQ enable."

    vbus_remove_irq_enable:
      base: bool
      start: 6
      description: "VBUS remove IRQ enable."

    battery_insert_irq_enable:
      base: bool
      start: 5
      description: "Battery insert IRQ enable."

    battery_remove_irq_enable:
      base: bool
      start: 4
      description: "Battery remove IRQ enable."

    power_key_short_press_irq_enable:
      base: bool
      start: 3
      description: "Power key short press IRQ enable."

    power_key_long_press_irq_enable:
      base: bool
      start: 2
      description: "Power key long press IRQ enable."

    power_key_negative_edge_irq_enable:
      base: bool
      start: 1
      description: "Power key negative edge IRQ enable."

    power_key_positive_edge_irq_enable:
      base: bool
      start: 0
      description: "Power key positive edge IRQ enable."

IrqStatus0:
  # REG48H - irq0 (Write 1 to clear)
  type: register
  address: 0x48
  size_bits: 8
  access: RW # Write 1 to clear status bits
  reset_value: 0x0
  description: |
    Interrupt status register 0. Write 1 to corresponding bit to clear the interrupt.
    Corresponds to interrupt enable register 0 (REG40H).
  fields:
    soc_warning_level2_irq:
      base: bool
      start: 7
      description: "SOC drop to Warning Level2 IRQ status. Write 1 to clear."

    soc_warning_level1_irq:
      base: bool
      start: 6
      description: "SOC drop to Warning Level1 IRQ status. Write 1 to clear."

    gauge_watchdog_timeout_irq:
      base: bool
      start: 5
      description: "Gauge watchdog timeout IRQ status. Write 1 to clear."

    new_soc_irq:
      base: bool
      start: 4
      description: "Gauge new SOC IRQ status. Write 1 to clear."

    battery_charge_over_temp_irq:
      base: bool
      start: 3
      description: "Battery over temperature in charge mode IRQ status. Write 1 to clear."

    battery_charge_under_temp_irq:
      base: bool
      start: 2
      description: "Battery under temperature in charge mode IRQ status. Write 1 to clear."

    battery_work_over_temp_irq:
      base: bool
      start: 1
      description: "Battery over temperature in work mode IRQ status. Write 1 to clear."

    battery_work_under_temp_irq:
      base: bool
      start: 0
      description: "Battery under temperature in work mode IRQ status. Write 1 to clear."

# =============================================================================
# FUEL GAUGE REGISTERS
# =============================================================================

BatteryPercentage:
  # REG A4H - soc
  type: register
  address: 0xa4
  size_bits: 8
  access: RO
  description: |
    Battery State of Charge (SOC) percentage from fuel gauge.
    Range: 0-100% in 1% increments.
  fields:
    percentage:
      base: uint
      start: 0
      end: 8
      description: "Battery percentage (0-100%)."
